{"version":3,"file":"neatsio-rest.js","sources":["../src/utils/async-wrapper.ts","../src/utils/is-plain-object.ts","../src/services/service.ts","../src/services/mongoose-service.ts","../src/services/sequelize-service.ts","../src/utils/model-identifier.ts","../src/utils/path.ts","../src/converters/converter.ts","../src/converters/sequelize.converter.ts","../src/query-parser.ts","../src/controller.ts","../src/configuration.ts","../src/orchestrator.ts","../src/neatsio-rest.ts"],"sourcesContent":["import { Request, Response, NextFunction, RequestHandler } from 'express'\n\nexport default function asyncWrapper(fn: RequestHandler) {\n  return function(req: Request, res: Response, next: NextFunction) {\n    try {\n      fn(req, res, next)\n    } catch (e) {\n      next(e)\n    }\n  }\n}\n","export default function isPlainObject(obj: any) {\n  return obj && obj.constructor === {}.constructor\n}\n","import QueryParser from '../query-parser'\n\nexport default abstract class Service {\n  /**\n   *\n   */\n  public readonly model: any\n\n  /**\n   *\n   */\n  public hiddenAttributes: any\n\n  /**\n   *\n   * @param id\n   * @param query\n   */\n  abstract findById(id: string, query?: QueryParser): Promise<any>\n\n  /**\n   *\n   */\n  abstract find(query?: QueryParser): Promise<any>\n\n  /**\n   *\n   */\n  abstract count(query?: QueryParser): Promise<any>\n\n  /**\n   *\n   * @param body\n   */\n  abstract createOne(body: any, query?: QueryParser): Promise<any>\n\n  /**\n   *\n   * @param body\n   */\n  abstract createBulk(body: any): Promise<any>\n\n  /**\n   *\n   * @param body\n   */\n  abstract updateOne(id: string, body: any, query?: QueryParser): Promise<any>\n\n  /**\n   *\n   * @param body\n   * @param query\n   */\n  abstract updateBulk(body: any, query?: QueryParser): Promise<any>\n\n  /**\n   *\n   * @param id\n   */\n  abstract deleteOne(id: string): Promise<any>\n\n  /**\n   *\n   * @param query\n   */\n  abstract deleteBulk(query?: QueryParser): Promise<any>\n\n  /**\n   *\n   * @param attributes\n   */\n  abstract setHiddenAttributes(attributes: any): void\n\n  /**\n   *\n   * @param model\n   */\n  protected abstract removeHiddenAttributesFromEntity(model: any): any\n\n  /**\n   *\n   */\n  abstract get associations(): Array<any>\n\n  /**\n   *\n   */\n  abstract get modelName(): string\n}\n","import { Model } from 'mongoose'\nimport { HttpError } from '@owliehq/http-errors'\n\nimport Service from './service'\nimport QueryParser from '../query-parser'\n\nexport default class MongooseService extends Service {\n  public readonly model: Model<any>\n\n  /**\n   *\n   * @param model\n   */\n  public constructor(model: Model<any>) {\n    super()\n    this.model = model\n  }\n\n  /**\n   *\n   * @param id\n   */\n  public async findById(id: string, queryParser?: QueryParser) {\n    let query = this.model.findById(id)\n\n    if (queryParser) {\n      const { populate } = queryParser.toMongooseParams()\n      // @ts-ignore\n      query = populate ? query.deepPopulate(populate) : query\n    }\n\n    const result = await query.exec()\n\n    if (!result) throw HttpError.NotFound()\n\n    return result\n  }\n\n  /**\n   *\n   */\n  public async find(queryParser: QueryParser) {\n    const { conditions, select, options, populate } = queryParser.toMongooseParams()\n\n    let query = this.model.find(conditions, select, options)\n\n    // @ts-ignore\n    query = populate ? query.deepPopulate(populate) : query\n\n    try {\n      const result = await query.exec()\n      return result\n    } catch (err) {\n      console.error(err)\n      throw err\n    }\n  }\n\n  /**\n   *\n   * @param queryParser\n   */\n  public async count(queryParser: QueryParser) {\n    throw new Error('Not implemented')\n  }\n\n  /**\n   *\n   * @param body\n   */\n  public async createOne(body: any) {\n    const created = await this.model.create(body)\n    return created\n  }\n\n  /**\n   *\n   * @param id\n   * @param body\n   */\n  public async updateOne(id: string, body: any) {\n    await this.model.updateOne({ _id: id }, body)\n    const updated = await this.findById(id)\n    return updated\n  }\n\n  /**\n   *\n   * @param body\n   */\n  createBulk(body: any): Promise<any> {\n    throw new Error('Method not implemented.')\n  }\n\n  /**\n   *\n   * @param body\n   * @param query\n   */\n  updateBulk(body: any, query?: any): Promise<any> {\n    throw new Error('Method not implemented.')\n  }\n\n  /**\n   *\n   * @param attributes\n   */\n  setHiddenAttributes(attributes: any): void {\n    this.hiddenAttributes = attributes\n  }\n\n  /**\n   *\n   * @param id\n   */\n  public async deleteOne(id: string): Promise<any> {\n    await this.model.deleteOne({ _id: id })\n    return { deletedAt: new Date() }\n  }\n\n  /**\n   *\n   * @param query\n   */\n  public async deleteBulk(query?: QueryParser | undefined): Promise<any> {\n    throw new Error('Method not implemented.')\n  }\n\n  /**\n   *\n   * @param model\n   */\n  protected removeHiddenAttributesFromEntity(model: any) {\n    return model\n  }\n\n  /**\n   *\n   */\n  public get associations() {\n    // TODO\n    return []\n  }\n\n  /**\n   *\n   */\n  public get modelName() {\n    return this.model.modelName.toLowerCase()\n  }\n}\n","import { Model } from 'sequelize'\nimport { HttpError } from '@owliehq/http-errors'\n\nimport Service from './service'\nimport QueryParser from '../query-parser'\n\nexport default class SequelizeService<M extends Model> extends Service {\n  public readonly model: { new (): M } & typeof Model\n\n  /**\n   *\n   * @param model\n   */\n  public constructor(model: { new (): M } & typeof Model) {\n    super()\n    this.model = model\n  }\n\n  /**\n   *\n   * @param id\n   */\n  public async findById(id: string, query?: QueryParser) {\n    const { include, attributes }: any = query?.toSequelizeParams() || {}\n\n    const result = await this.model.findByPk(id, { include, attributes })\n\n    if (!result) throw HttpError.NotFound()\n\n    return result\n  }\n\n  /**\n   *\n   */\n  public async find(query?: QueryParser) {\n    //\n    const queryParams = query?.toSequelizeParams()\n\n    const { count, rows } = await this.model.findAndCountAll(queryParams)\n\n    return rows\n  }\n\n  /**\n   *\n   */\n  public async count(query?: QueryParser) {\n    const { where } = query?.toSequelizeParams() || {}\n\n    const result = await this.model.count({ where })\n\n    return result\n  }\n\n  /**\n   *\n   * @param body\n   */\n  public async createOne(body: any, query?: QueryParser) {\n    const { [this.model.primaryKeyAttribute]: id }: any = await this.model.create(body)\n\n    const result = await this.findById(id, query)\n\n    return result\n  }\n\n  /**\n   *\n   * @param body\n   */\n  public async createBulk(body: any) {\n    await this.model.bulkCreate(body)\n  }\n\n  /**\n   * Update an entity by the primary key (mostly id)\n   * @param body\n   */\n  public async updateOne(id: string, body: any, query?: QueryParser) {\n    const entityBeforeUpdate = await this.findById(id)\n\n    await entityBeforeUpdate.update(body)\n\n    const result = await this.findById(id, query)\n\n    return result\n  }\n\n  /**\n   * Update multiple entities by query\n   * @param body\n   * @param query\n   */\n  public async updateBulk(body: any, query?: QueryParser) {\n    const { where } = query?.toSequelizeParams() || {}\n\n    const restriction = where ? { where } : { where: { 1: 1 } }\n\n    await this.model.update(body, restriction)\n  }\n\n  /**\n   *\n   * @param id\n   */\n  public async deleteOne(id: string) {\n    const entityBeforeDeletion = await this.findById(id)\n\n    await entityBeforeDeletion.destroy()\n  }\n\n  /**\n   *\n   * @param query\n   */\n  public async deleteBulk(query?: QueryParser): Promise<any> {\n    const { where } = query?.toSequelizeParams() || {}\n\n    const restriction = where ? { where } : { where: { 1: 1 } }\n\n    const count = await this.model.destroy(restriction)\n\n    return count\n  }\n\n  /**\n   *\n   * @param attributes\n   */\n  public setHiddenAttributes(attributes: any): void {\n    this.hiddenAttributes = attributes\n  }\n\n  /**\n   *\n   * @param model\n   */\n  protected removeHiddenAttributesFromEntity(entity: Model) {\n    const values: any = entity.toJSON()\n\n    this.hiddenAttributes.forEach((attribute: string) => {\n      if (values[attribute]) delete values[attribute]\n    })\n\n    return values\n  }\n\n  /**\n   *\n   */\n  public get associations(): Array<any> {\n    return Object.values(this.model.associations)\n      .filter(association => association.associationType === 'HasMany')\n      .map(association => {\n        return {\n          model: association.target,\n          foreignKey: association.foreignKey\n        }\n      })\n  }\n\n  /**\n   *\n   */\n  public get modelName() {\n    return this.model.name.toLowerCase()\n  }\n}\n","import * as mongoose from 'mongoose'\nimport * as sequelize from 'sequelize'\n\nimport MongooseService from '../services/mongoose-service'\nimport SequelizeService from '../services/sequelize-service'\n\nexport type NeatsioModel<M> = MongooseModel | SequelizeModel<M>\nexport type MongooseModel = mongoose.Model<any>\nexport type SequelizeModel<M> = { new (): M } & typeof sequelize.Model\n\nexport default {\n  /**\n   *\n   * @param model\n   */\n  getServiceFromModel<M extends sequelize.Model>(model: NeatsioModel<M>) {\n    return model.prototype instanceof mongoose.Model\n      ? new MongooseService(model as MongooseModel)\n      : new SequelizeService(model as SequelizeModel<M>)\n  }\n}\n","/**\n *\n * @param paths\n */\nexport function deconstructPath(paths: Array<string>) {\n  const _paths: Array<string> = []\n\n  paths.forEach(path => {\n    let currentPath: string | null = null\n    path.split('.').forEach(function(subpath) {\n      currentPath = (currentPath ? currentPath + '.' : '') + subpath.trim()\n      _paths.push(currentPath)\n    })\n  })\n\n  return _paths\n}\n\n/**\n *\n * @param paths\n */\nexport function normalizePath(paths: Array<string>) {\n  return paths\n    .map(function(path) {\n      return path.trim()\n    })\n    .filter(function(path) {\n      return path !== ''\n    })\n    .filter(function(path, index, self) {\n      return self.indexOf(path) === index\n    }) // removes duplicates\n}\n","export abstract class Converter {\n  protected conditions?: any\n  protected limit?: any\n  protected skip?: any\n  protected sort?: any\n  protected select?: any\n  protected populate?: any\n\n  constructor(query: ParsedQuery) {\n    this.conditions = query.conditions\n    this.limit = query.limit\n    this.skip = query.skip\n    this.sort = query.sort\n    this.select = query.select\n    this.populate = query.populate\n  }\n\n  abstract toParams(options?: any): any\n}\n\nexport interface ParsedQuery {\n  conditions?: any\n  skip?: any\n  sort?: any\n  limit?: any\n  select?: any\n  populate?: any\n}\n","import { Op, fn, col, where, Model, IncludeOptions, ModelStatic } from 'sequelize'\nimport * as pluralize from 'pluralize'\nimport * as dot from 'dot-prop'\nimport { isPlainObject, normalizePath, deconstructPath } from '../utils'\nimport { Converter, ParsedQuery } from './converter'\nimport currentOrchestrator from '../neatsio-rest'\n\nexport class SequelizeConverter extends Converter {\n  /**\n   *\n   */\n  private specialSort: any[] = []\n\n  /**\n   *\n   * @param query\n   */\n  constructor(query: ParsedQuery, private model: { new (): Model } & typeof Model) {\n    super(query)\n  }\n\n  /**\n   *\n   */\n  public toParams(options: any): ISequelizeParsedParameters {\n    const params: ISequelizeParsedParameters = {\n      order: []\n    }\n\n    params.attributes = this.convertSelect()\n    if (this.conditions) params.where = this.convertConditions(options?.inverseLngLat)\n    if (this.limit) params.limit = this.limit\n    if (this.skip) params.offset = this.skip\n    if (this.sort || this.specialSort.length) params.order = this.convertSort()\n    if (this.populate) params.include = this.convertPopulate()\n\n    return params\n  }\n\n  /**\n   *\n   */\n  private convertSelect() {\n    const selection = this.select?.length ? this.select.split(' ') : []\n\n    const currentModel = this.model\n\n    let attributes = undefined\n\n    if (currentModel) {\n      const { hiddenAttributes } = currentOrchestrator.servicesOptions.hasOwnProperty(currentModel.name.toLowerCase())\n        ? currentOrchestrator.servicesOptions[currentModel.name.toLowerCase()]\n        : { hiddenAttributes: [] }\n\n      const currentAttributes = Object.keys(currentModel.rawAttributes)\n\n      attributes = currentAttributes\n        .filter(x => !hiddenAttributes.includes(x))\n        .concat(hiddenAttributes.filter((x: any) => !currentAttributes.includes(x)))\n\n      if (selection.length) attributes = attributes.filter(x => selection.includes(x))\n    }\n\n    return attributes\n  }\n\n  /**\n   *\n   */\n  private convertSort() {\n    const fields = this.sort ? this.sort.split(' ') : []\n\n    //\n    return [\n      ...fields.map((field: string) => {\n        const order = field.startsWith('-') ? 'DESC' : 'ASC'\n        return order === 'DESC' ? [field.substring(1), order] : [field, order]\n      }),\n      ...this.specialSort\n    ]\n  }\n\n  /**\n   *\n   */\n  private convertConditions(options: any) {\n    const sequelizeOperators: any = {\n      $eq: Op.eq,\n      $ne: Op.ne,\n      $gte: Op.gte,\n      $gt: Op.gt,\n      $lte: Op.lte,\n      $lt: Op.lt,\n      $in: Op.in,\n      $nin: Op.notIn,\n      $like: Op.like,\n      $notLike: Op.notLike,\n      $iLike: Op.iLike,\n      $notILike: Op.notILike,\n      $or: Op.or,\n      $and: Op.and,\n\n      // TODO: verify we are in Postgre env\n      $contains: Op.contains,\n      $contained: Op.contained,\n      $overlap: Op.overlap,\n      $any: Op.any\n    }\n\n    /**\n     *\n     * @param conditions\n     */\n    const convert = (conditions: any): any => {\n      //\n      if (Array.isArray(conditions)) return conditions.map(convert)\n\n      //\n      if (!isPlainObject(conditions)) return conditions\n\n      //\n      const converted = Object.keys(conditions).reduce((result: any, prop) => {\n        const value = conditions[prop]\n        const key = sequelizeOperators[prop] || prop\n\n        //\n        if (value === undefined) throw new Error('NO UNDEFINED VALUE')\n\n        //\n        if (value === null) {\n          result[key] = null\n          return result\n        }\n\n        //\n        if (value.hasOwnProperty('$near')) {\n          const nearParams = value.$near\n\n          const radius = nearParams.radius || 10\n\n          if (nearParams.lat && nearParams.lng) {\n            const point = options?.inverseLngLat\n              ? `POINT(${nearParams.lat} ${nearParams.lng})`\n              : `POINT(${nearParams.lng} ${nearParams.lat})`\n\n            const within = fn('ST_DWithin', col(`${this.model.name}.${key}`), fn('ST_GeometryFromText', point), radius)\n\n            // @ts-ignore\n            result[Op.and] = where(within, true)\n\n            const order = [fn('ST_Distance', col(`${this.model.name}.${key}`), fn('ST_GeometryFromText', point)), 'ASC']\n\n            this.specialSort.push(order)\n          }\n\n          return result\n        }\n\n        result[key] = convert(value)\n\n        return result\n      }, {})\n\n      return converted\n    }\n\n    return convert(this.conditions)\n  }\n\n  /**\n   *\n   */\n  private convertPopulate() {\n    const paths = normalizePath(deconstructPath(this.populate.split(' '))).filter(path => path.split('.').length < 10)\n    const treePaths = {}\n\n    const limitIncluded = currentOrchestrator.config.includeLimit\n\n    paths.forEach(path => dot.set(treePaths, path, true))\n\n    const toIncludePropertyRecursive = (tree: any, modelCheck: any): any => {\n      const currentModel = modelCheck as { new (): Model } & typeof Model\n\n      return Object.keys(tree).map(entry => {\n        let extractedModel: ModelStatic<any> | undefined\n        let associationType: string | undefined\n\n        for (let [attribute, association] of Object.entries(currentModel.associations)) {\n          if (pluralize.singular(attribute) === pluralize.singular(entry)) {\n            associationType = association.associationType\n            extractedModel = association.target\n            break\n          }\n        }\n\n        //\n        const model = extractedModel\n\n        let attributes = undefined\n\n        if (model) {\n          const { hiddenAttributes } = currentOrchestrator.servicesOptions.hasOwnProperty(model.name.toLowerCase())\n            ? currentOrchestrator.servicesOptions[model.name.toLowerCase()]\n            : { hiddenAttributes: [] }\n\n          const currentAttributes = Object.keys(model.rawAttributes)\n\n          attributes = currentAttributes\n            .filter(x => !hiddenAttributes.includes(x))\n            .concat(hiddenAttributes.filter((x: any) => !currentAttributes.includes(x)))\n        }\n\n        const includeConfig: IncludeOptions = {\n          model,\n          as: entry,\n          attributes\n        }\n\n        //\n        if (tree[entry] !== true) includeConfig.include = toIncludePropertyRecursive(tree[entry], model)\n\n        //\n        if (associationType === 'HasMany') {\n          includeConfig.limit = limitIncluded\n          includeConfig.separate = true\n        }\n\n        return includeConfig\n      })\n    }\n\n    return toIncludePropertyRecursive(treePaths, this.model)\n  }\n\n  /**\n   *\n   */\n  public static convert(\n    query: ParsedQuery,\n    model: { new (): Model } & typeof Model,\n    options: any\n  ): ISequelizeParsedParameters {\n    const currentConvert = new this(query, model)\n    return currentConvert.toParams(options)\n  }\n}\n\nexport interface ISequelizeParsedParameters {\n  attributes?: Array<string>\n  where?: { [key: string]: any }\n  order: Array<any>\n  limit?: number\n  offset?: number\n  include?: Array<any>\n}\n","import { HttpError } from '@owliehq/http-errors'\nimport { SequelizeConverter, ISequelizeParsedParameters } from './converters'\nimport { ParsedQuery } from './converters/converter'\n\n/**\n *\n */\nexport default class QueryParser {\n  private conditions?: any\n  private limit?: any\n  private skip?: any\n  private sort?: any\n  private select?: any\n  private populate?: any\n\n  constructor(query: any, private model: any, private options?: any) {\n    this.parseConditions(query.$conditions)\n    this.parseSelect(query.$select)\n    this.parseLimit(query.$limit)\n    this.parseSkip(query.$skip)\n    this.parseSort(query.$sort)\n    this.parsePopulate(query.$populate)\n  }\n\n  /**\n   *\n   */\n  private get queryParsed(): ParsedQuery {\n    const { select, conditions, limit, skip, sort, populate } = this\n    return { select, conditions, limit, skip, sort, populate }\n  }\n\n  /**\n   *\n   */\n  public toMongooseParams(): IMongooseParsedParameters {\n    // TODO: make to converter!\n\n    const params: IMongooseParsedParameters = {\n      conditions: {},\n      options: {}\n    }\n\n    if (this.select) params.select = this.select\n    if (this.conditions) params.conditions = this.conditions\n    if (this.limit) params.options.limit = this.limit\n    if (this.skip) params.options.skip = this.skip\n    if (this.sort) params.options.sort = this.sort\n    if (this.populate) params.populate = this.populate\n\n    return params\n  }\n\n  /**\n   *\n   */\n  public toSequelizeParams(): ISequelizeParsedParameters {\n    return SequelizeConverter.convert(this.queryParsed, this.model, this.options)\n  }\n\n  /**\n   *\n   * @param conditions\n   */\n  private parseConditions(conditions: any) {\n    try {\n      this.conditions = {}\n\n      if (conditions) this.conditions = this.options.body ? conditions : JSON.parse(conditions)\n    } catch (err) {\n      throw HttpError.BadRequest('Malformatted JSON')\n    }\n  }\n\n  /**\n   *\n   * @param select\n   */\n  private parseSelect(select?: string) {\n    if (!select) return\n    this.select = select\n  }\n\n  /**\n   *\n   * @param sort\n   */\n  private parseSort(sort?: string) {\n    if (!sort) return\n    this.sort = sort\n  }\n\n  /**\n   *\n   * @param limit\n   */\n  private parseLimit(limit?: string) {\n    if (!limit) return\n    this.limit = parseInt(limit, 10)\n  }\n\n  /**\n   *\n   * @param skip\n   */\n  private parseSkip(skip?: string) {\n    if (!skip) return\n    this.skip = parseInt(skip, 10)\n  }\n\n  /**\n   *\n   * @param populate\n   */\n  private parsePopulate(populate?: string) {\n    if (!populate) return\n    this.populate = populate\n  }\n}\n\n/**\n *\n */\nexport interface IMongooseParsedParameters {\n  conditions: { [key: string]: any }\n  select?: string\n  options: {\n    sort?: string\n    limit?: number\n    skip?: number\n  }\n  populate?: string\n}\n","import { Router } from 'express'\nimport * as pluralize from 'pluralize'\n\nimport Service from './services/service'\nimport QueryParser from './query-parser'\n\nimport { AsyncWrapper } from './utils'\n\ndeclare global {\n  namespace Express {\n    interface Request {\n      parsedQuery: any\n      results?: any\n    }\n  }\n}\n\n/**\n *\n */\nexport class Controller {\n  /**\n   *\n   */\n  constructor(\n    public readonly service: Service,\n    public readonly router: Router,\n    private middlewares: any,\n    private customRoutes: any = [],\n    private queryOptions: any,\n    private unauthorizedRoutes: Array<String> = [],\n    private routeName?: string\n  ) {\n    //this.customRoutes = params.routes || []\n\n    this.setRouteName(routeName)\n  }\n\n  /**\n   *\n   */\n  public static init<T extends typeof Controller>(\n    this: T,\n    service: Service,\n    router: Router,\n    params?: any\n  ): InstanceType<T> {\n    params = params || {}\n\n    const { middlewares, routes, queryOptions, unauthorizedRoutes }: any = {\n      middlewares: {\n        before: [],\n        after: [],\n        getOne: [],\n        getMany: [],\n        query: [],\n        queryCount: [],\n        createOne: [],\n        createBulk: [],\n        updateOne: [],\n        updateBulk: [],\n        deleteOne: []\n      },\n      ...params\n    }\n\n    return new this(service, router, middlewares, routes, queryOptions, unauthorizedRoutes) as InstanceType<T>\n  }\n\n  /**\n   * Build all routes via availables methods for the current model\n   * DISCLAIMER: call order is important\n   */\n  public buildRoutes() {\n    this.buildCustomBeforeMiddlewares()\n    this.buildCustomRoutes()\n\n    if (!this.unauthorizedRoutes.includes('count')) this.buildCountRoute()\n    if (!this.unauthorizedRoutes.includes('query')) this.buildQueryRoute()\n    if (!this.unauthorizedRoutes.includes('queryCount')) this.buildQueryCountRoute()\n    if (!this.unauthorizedRoutes.includes('getOne')) this.buildGetOneRoute()\n    if (!this.unauthorizedRoutes.includes('getMany')) this.buildGetManyRoute()\n    if (!this.unauthorizedRoutes.includes('createBulk')) this.buildBulkPostRoute()\n    if (!this.unauthorizedRoutes.includes('createOne')) this.buildOnePostRoute()\n    if (!this.unauthorizedRoutes.includes('updateBulk')) this.buildBulkPutRoute()\n    if (!this.unauthorizedRoutes.includes('updateOne')) this.buildOnePutRoute()\n    if (!this.unauthorizedRoutes.includes('deleteBulk')) this.buildBulkDeleteRoute()\n    if (!this.unauthorizedRoutes.includes('deleteOne')) this.buildOneDeleteRoute()\n\n    this.buildCustomAfterMiddlewares()\n  }\n\n  /**\n   *\n   */\n  private buildCustomBeforeMiddlewares() {\n    if (this.middlewares?.before?.length) this.router.use(this.mainRoute, this.middlewares.before)\n  }\n\n  /**\n   *\n   */\n  private buildCustomAfterMiddlewares() {\n    if (this.middlewares?.after?.length) this.router.use(this.mainRoute, this.middlewares.after)\n  }\n\n  /**\n   *\n   */\n  private buildCustomRoutes() {\n    this.customRoutes.forEach((route: any) => {\n      const middlewares = route.middlewares || []\n      switch (route.method) {\n        case 'GET':\n          this.router.get(this.mainRoute + route.path, middlewares, route.execute)\n          break\n        case 'POST':\n          this.router.post(this.mainRoute + route.path, middlewares, route.execute)\n          break\n        case 'PUT':\n          this.router.put(this.mainRoute + route.path, middlewares, route.execute)\n          break\n        case 'DELETE':\n          this.router.delete(this.mainRoute + route.path, middlewares, route.execute)\n          break\n      }\n    })\n  }\n\n  /**\n   * Populate the main router with GET /models/:id route\n   */\n  private buildGetOneRoute() {\n    const callback = AsyncWrapper(async (req, res) => {\n      const response = await this.service.findById(req.params.id, req.parsedQuery)\n      return res.status(200).json(response)\n    })\n\n    const beforeMiddlewares = this.middlewares?.getOne?.before || []\n\n    this.router.get(this.mainRouteWithId, [...beforeMiddlewares, this.getQueryParserMiddleware(), callback])\n  }\n\n  /**\n   * Populate the main router with GET /models route\n   * Handle query parameters by passing them to the service\n   */\n  private buildGetManyRoute() {\n    const callback = AsyncWrapper(async (req, res) => {\n      const response = await this.service.find(req.parsedQuery)\n      return res.status(200).json(response)\n    })\n\n    const beforeMiddlewares = this.middlewares?.getMany?.before || []\n\n    this.router.get(this.mainRoute, [...beforeMiddlewares, this.getQueryParserMiddleware(), callback])\n  }\n\n  /**\n   *\n   */\n  private buildCountRoute() {\n    const callback = AsyncWrapper(async (req, res) => {\n      const response = await this.service.count(req.parsedQuery)\n      return res.status(200).json(response)\n    })\n\n    const beforeMiddlewares = this.middlewares?.count?.before || []\n\n    this.router.get(this.mainRouteWithCount, [...beforeMiddlewares, this.getQueryParserMiddleware(), callback])\n  }\n\n  /**\n   *\n   */\n  private buildQueryRoute() {\n    const callback = AsyncWrapper(async (req, res) => {\n      const response = await this.service.find(req.parsedQuery)\n      return res.status(200).json(response)\n    })\n\n    const beforeMiddlewares = this.middlewares?.query?.before || []\n\n    this.router.post(this.mainRouteWithQuery, [...beforeMiddlewares, this.getQueryParserMiddleware(true), callback])\n  }\n\n  /**\n   *\n   */\n  private buildQueryCountRoute() {\n    const callback = AsyncWrapper(async (req, res) => {\n      const response = await this.service.count(req.parsedQuery)\n      return res.status(200).json(response)\n    })\n\n    const beforeMiddlewares = this.middlewares?.queryCount?.before || []\n\n    this.router.post(this.mainRouteWithQueryCount, [\n      ...beforeMiddlewares,\n      this.getQueryParserMiddleware(true),\n      callback\n    ])\n  }\n\n  /**\n   *\n   */\n  private buildOnePostRoute() {\n    const callback = AsyncWrapper(async (req, res) => {\n      const response = await this.service.createOne(req.body, req.parsedQuery)\n      return res.status(201).json(response)\n    })\n\n    const beforeMiddlewares = this.middlewares?.createOne?.before || []\n\n    this.router.post(this.mainRoute, [...beforeMiddlewares, this.getQueryParserMiddleware(), callback])\n  }\n\n  /**\n   *\n   */\n  private buildBulkPostRoute() {\n    const callback = AsyncWrapper(async (req, res) => {\n      const response = await this.service.createBulk(req.body)\n      return res.status(201).json(response)\n    })\n\n    const beforeMiddlewares = this.middlewares?.createBulk?.before || []\n\n    this.router.post(this.mainRouteWithBulk, [...beforeMiddlewares, callback])\n  }\n\n  /**\n   *\n   */\n  private buildOnePutRoute() {\n    const callback = AsyncWrapper(async (req, res) => {\n      const response = await this.service.updateOne(req.params.id, req.body, req.parsedQuery)\n      return res.status(200).json(response)\n    })\n\n    const beforeMiddlewares = this.middlewares?.updateOne?.before || []\n\n    this.router.put(this.mainRouteWithId, [...beforeMiddlewares, this.getQueryParserMiddleware(), callback])\n  }\n\n  /**\n   *\n   */\n  private buildBulkPutRoute() {\n    const callback = AsyncWrapper(async (req, res) => {\n      const response = await this.service.updateBulk(req.body, req.parsedQuery)\n      return res.status(200).json(response)\n    })\n\n    const beforeMiddlewares = this.middlewares?.updateBulk?.before || []\n\n    this.router.put(this.mainRouteWithBulk, [...beforeMiddlewares, this.getQueryParserMiddleware(), callback])\n  }\n\n  /**\n   *\n   */\n  private buildOneDeleteRoute() {\n    const callback = AsyncWrapper(async (req, res) => {\n      await this.service.deleteOne(req.params.id)\n      return res.status(200).json()\n    })\n\n    const beforeMiddlewares = this.middlewares?.deleteOne?.before || []\n\n    this.router.delete(this.mainRouteWithId, [...beforeMiddlewares, callback])\n  }\n\n  /**\n   *\n   */\n  private buildBulkDeleteRoute() {\n    const callback = AsyncWrapper(async (req, res) => {\n      const response = await this.service.deleteBulk(req.parsedQuery)\n      return res.status(200).json({ count: response })\n    })\n\n    const beforeMiddlewares = this.middlewares?.deleteBulk?.before || []\n\n    this.router.delete(this.mainRouteWithBulk, [...beforeMiddlewares, this.getQueryParserMiddleware(), callback])\n  }\n\n  /**\n   *\n   */\n  private getQueryParserMiddleware(body = false) {\n    const middleware = AsyncWrapper(async (req, res, next) => {\n      const toBeParsed = body ? req.body : req.query\n\n      req.parsedQuery = new QueryParser(toBeParsed, this.service.model, { body })\n      return next()\n    })\n\n    return middleware\n  }\n\n  /**\n   *\n   * @param routeName\n   */\n  private setRouteName(routeName?: string): void {\n    this.routeName = routeName || pluralize.plural(this.service.modelName).toLowerCase()\n  }\n\n  /**\n   * Create route string from model name\n   * Useful for GET / POST methods\n   */\n  private get mainRoute() {\n    return '/' + this.routeName\n  }\n\n  /**\n   * Create subroute string with id param from mainRoute\n   * Useful for GET / PUT / DELETE methods\n   */\n  private get mainRouteWithId() {\n    return this.mainRoute + '/:id'\n  }\n\n  /**\n   * Create subroute string with id param from mainRoute\n   * Useful for GET / PUT / DELETE methods\n   */\n  private get mainRouteWithBulk() {\n    return this.mainRoute + '/bulk'\n  }\n\n  private get mainRouteWithQuery() {\n    return this.mainRoute + '/query'\n  }\n\n  private get mainRouteWithQueryCount() {\n    return this.mainRoute + '/query/count'\n  }\n\n  /**\n   * Create subroute string with count from mainRoute\n   * Useful for GET method\n   */\n  private get mainRouteWithCount() {\n    return this.mainRoute + '/count'\n  }\n}\n","export class Configuration {\n  public includeLimit = 50\n\n  // TODO: interface & throwing errors\n  constructor(options: any = {}) {\n    options = options || {}\n\n    this.includeLimit = options.includeLimit || 100\n  }\n}\n","import * as sequelize from 'sequelize'\nimport * as express from 'express'\n\nimport { Controller } from './controller'\nimport { modelIdentifier, NeatsioModel } from './utils'\nimport { Configuration } from './configuration'\n\n/**\n *\n */\nexport default class Orchestrator {\n  /**\n   * Map of controllers registred by routeName\n   */\n  private controllers: { [name: string]: Controller } = {}\n\n  /**\n   *\n   */\n  public config = new Configuration()\n\n  /**\n   * Express router\n   */\n  private router: express.Router = express.Router()\n\n  /**\n   * Expose finally routes\n   */\n  public get routes() {\n    this.buildRoutes()\n    return this.router\n  }\n\n  /**\n   * Allow to record the models, one by one with verification of duplicate contents\n   * Init and create afferent controller (by model name)\n   */\n  public registerModel<M extends sequelize.Model>(model: NeatsioModel<M>, controllerParams?: any) {\n    const service = modelIdentifier.getServiceFromModel(model)\n\n    // TODO: Do something in other place with that\n    service.setHiddenAttributes(controllerParams?.hiddenAttributes || [])\n\n    this.controllers[service.modelName] = Controller.init(service, this.router, controllerParams)\n  }\n\n  /**\n   * Prepare a router with all REST Routes, handling errors\n   * And expose the router, must be exposed in a seperate getter\n   */\n  private buildRoutes() {\n    // We go through current controllers and build REST routes one by one\n    Object.values(this.controllers).forEach(controller => {\n      controller.buildRoutes()\n    })\n  }\n\n  /**\n   * Get models\n   */\n  public get models() {\n    return Object.values(this.controllers).reduce((result: any, controller) => {\n      result[controller.service.modelName] = controller.service.model\n      return result\n    }, {})\n  }\n\n  /**\n   *\n   */\n  public get servicesOptions() {\n    return Object.values(this.controllers).reduce((result: any, controller) => {\n      const { hiddenAttributes } = controller.service\n\n      result[controller.service.modelName] = {\n        hiddenAttributes: hiddenAttributes || []\n      }\n\n      return result\n    }, {})\n  }\n\n  /**\n   *\n   */\n  public reset() {\n    this.controllers = {}\n    this.router = express.Router()\n  }\n}\n","import Orchestrator from './orchestrator'\nimport * as mongoose from 'mongoose'\n\nmongoose.plugin(require('mongoose-deep-populate')(mongoose))\n\nconst orchestrator = new Orchestrator()\n\nexport default orchestrator\n"],"names":["HttpError","mongoose.Model","currentOrchestrator","Op","fn","col","where","dot.set","pluralize.singular","AsyncWrapper","pluralize.plural","express.Router","mongoose.plugin"],"mappings":"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"}